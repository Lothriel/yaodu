#!/usr/bin/python

#The MIT License (MIT)
#
#Copyright (c) 2015 Sam Yaple
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

DOCUMENTATION = '''
---
module: bslurp
version_added: 1.8.2
short_description: Slurps a file from a remote node
description:
     - Used for fetching a binary blob containing the file, then push that file
       to other hosts.
options:
  src:
    description:
      - File to fetch. When dest is used, src is expected to be a str with data
    required: True
    type: str
  compress:
    description:
      - Compress file with zlib
    default: True
    type: bool
  dest:
    description:
      - Where to write out binary blob
    required: False
    type: str
  mode:
    description:
      - Destination file permissions
    default: '0644'
    type: str
  sha_hash:
    description:
      - sha1 hash of the underlying data
    default: None
    type: bool
author: Sam Yaple
'''

EXAMPLES = '''
Distribute a file from single to many host:

- hosts: web_servers
  tasks:
    - name: Pull in web config
      bslurp: src="/path/to/file"
      register: file_data
      run_once: True
    - name: Push if changed
      bslurp:
        src: "{{ file_data.content }}"
        dest: "{{ file_data.source }}"
        mode: "{{ file_data.mode }}"
        sha_hash: "{{ file_data.sha_hash }}"

Distribute multiple files from single to many host:

- hosts: web_servers
  tasks:
    - name: Pull in web config
      bslurp: src="{{ item }}"
      with_items:
        - "/path/to/file1"
        - "/path/to/file2"
        - "/path/to/file3"
      register: file_data
      run_once: True
    - name: Push if changed
      bslurp:
        src: "{{ item.content }}"
        dest: "{{ item.source }}"
        mode: "{{ item.mode }}"
        sha_hash: "{{ item.sha_hash }}"
      with_items: file_data.results

Distribute a file many host without compression; Change permissions on dest:

- hosts: web_servers
  tasks:
    - name: Pull in web config
      bslurp: src="/path/to/file"
      register: file_data
      run_once: True
    - name: Push if changed
      bslurp:
        src: "{{ file_data.content }}"
        dest: "/new/path/to/file"
        mode: "0777"
        compress: False
        sha_hash: "{{ file_data.sha_hash }}"
'''

try:
    import sys
    import zlib
    import base64
    from hashlib import sha1
except ImportError, e:
    print "failed=True msg='failed to import python module: %s'" % e
    sys.exit(1)

def main():
    module = AnsibleModule(
        argument_spec = dict(
            src = dict(required=True, type='str'),
            compress = dict(default=True, type='bool'),
            dest = dict(type='str'),
            mode = dict(default='0644', type='str'),
            sha_hash = dict(default=None, type='str')
        ),
        supports_check_mode = True
    )

    src = module.params.get('src')
    dest = module.params.get('dest')

    try:
        if not dest:
            if not os.path.exists(src):
                module.fail_json(msg="file not found: %s" % src)
            if not os.access(src, os.R_OK):
                module.fail_json(msg="file is not readable: %s" % src)

            mode = oct(os.stat(src).st_mode & 0777)

            with open(src, 'rb') as f:
                if module.params.get('gzip'):
                    data = zlib.compress(f.read())
                else:
                    data = f.read()

            sha_hash = base64.b64encode(sha1(data).hexdigest())
            data = base64.b64encode(data)

            module.exit_json(content=data, source=src, mode=mode, \
                                                             sha_hash=sha_hash)
        else:
            sha_hash = base64.b64decode(module.params.get('sha_hash'))
            mode = int(module.params.get('mode'), 0)

            data = base64.b64decode(src)

            if module.params.get('gzip'):
                data = zlib.decompress(data)

            if sha1:
                if os.path.exists(dest) and os.access(dest, os.R_OK):
                    with open(dest, 'rb') as f:
                        if sha1(f.read()).hexdigest() == sha_hash:
                            module.exit_json()

                if sha_hash != sha1(data).hexdigest():
                    module.exit_json(failed=True, changed=False, \
                        msg='sha1 sum does not match decompressed data')

            try:
                with os.fdopen(os.open(dest, os.O_WRONLY | os.O_CREAT, \
                                                             mode), 'wb') as f:
                    f.write(data)
            except Exception as e:
                module.exit_json(failed=True, changed=True, msg=repr(e))

            module.exit_json(changed=True)
    except Exception as e:
        module.exit_json(failed=True, msg=repr(e))

# import module snippets
from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
