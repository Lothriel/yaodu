#!/usr/bin/python

#The MIT License (MIT)
#
#Copyright (c) 2015 Sam Yaple
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

DOCUMENTATION = '''
---
module: docker_env_builder
version_added: 1.9.0
short_description: Convert ini-style configs to environment variables
description:
  - Accepts ini style configs and runs them through configparser. Returns a
    comma seperated string of values that can be read as environment variables
    in the form of PREFIX_FILENAME_SECTION_KEY=VALUE
options:
  config_files:
    description:
      - A list of dicts of config files with { src: src, dest: dest}
    required: True
    type: list
  prefix:
    description:
      - The prefix to start the environment variables with
    default: 'YAODU'
    type: str
author: Sam Yaple
'''

EXAMPLES = '''
- hosts: ceph-osd
  tasks:
    - name: Return all valid formated devices wit hthe name CEPH_OSD
      ceph_osd_list:
      register: osds
'''

import sys
import os
from ConfigParser import ConfigParser

ESCAPE = '_'
EOL = '9' + ESCAPE

MAPPING = {
    '/': '0',
    '-': '1',
    '_': '2',
    '.': '3',
    ' ': '4',
}

REV_MAPPING = {v: k for k, v in MAPPING.items()}

def sanatize(name):
    name = name.replace(ESCAPE, ESCAPE + MAPPING[ESCAPE])

    for k in MAPPING:
        if k == ESCAPE:
            continue

        name = name.replace(k, ESCAPE + MAPPING[k])

    return name

def convert_name(prefix, filename, section, key):
    name = prefix + ESCAPE + EOL
    name += sanatize(filename)
    name += ESCAPE + EOL
    name += sanatize(section)
    name += ESCAPE + EOL
    name += sanatize(key)

    return name

def section_parser(prefix, config, config_file, section):
    env = dict()

    for item in config.items(section):
        env[convert_name(prefix, config_file['dest'], section, item[0])] = item[1]

    return env

def main():
    module = AnsibleModule(
        argument_spec = dict(
            config_files = dict(required=True, type='list'),
            prefix = dict(default='YAODU', type='str'),
        ),
        supports_check_mode = True
    )

    config_files = module.params.get('config_files')
    prefix = module.params.get('prefix')

    try:
        env = dict()

        for config_file in config_files:
            with open(os.path.expanduser(config_file['src']), 'rb') as f:
                config = ConfigParser()
                config.readfp(f)

                env.update(section_parser(prefix, config, config_file, 'DEFAULT'))
                config._defaults = {}

                for section in config.sections():
                    env.update(section_parser(prefix, config, config_file, section))

        module.exit_json(env=env)

    except Exception as e:
        module.exit_json(failed=True, msg=repr(e))

# import module snippets
from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
